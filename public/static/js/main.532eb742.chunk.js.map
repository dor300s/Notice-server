{"version":3,"sources":["cmps/EditNote.tsx","cmps/NotePreview.tsx","cmps/NoteList.tsx","services/noteService.ts","store/noteStore.ts","store/rootStateContext.tsx","pages/NoteApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["range","document","createRange","sel","window","getSelection","EditNote","addNote","editNote","currNote","useState","title","text","note","setNote","isFocused","setIsFocused","formRef","useRef","inputTitleRef","inputTextRef","useEffect","addEventListener","handleClick","removeEventListener","current","innerText","focus","e","contains","target","handleSubmit","handleChange","name","dataset","value","prev","a","prevState","pNote","_id","className","ref","onFocus","onSubmit","preventDefault","contentEditable","data-name","onInput","onKeyDown","keyCode","spellCheck","lastLine","childNodes","length","textLength","setStart","collapse","removeAllRanges","addRange","NotePreview","observer","removeNote","onClick","NoteList","notes","map","axios","Axios","create","withCredentials","baseUrl","getNote","id","get","then","res","data","createNote","post","put","delete","NoteStore","makeObservable","this","observable","action","reverse","savedNote","unshift","idx","findIndex","n","splice","computed","RootStateContext","createContext","noteStore","RootStateProvider","children","Provider","NoteApp","useContext","loadNotes","loadNote","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.532eb742.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Note } from '../interfaces/noteInterface';\r\nimport { NoteStore } from '../store/noteStore';\r\n\r\n\r\ntype NewNoteProps = {\r\n    addNote: NoteStore[\"addNote\"],\r\n    editNote: NoteStore[\"editNote\"],\r\n    currNote: NoteStore[\"currNote\"]\r\n}\r\n\r\nlet range: any = document.createRange();\r\nlet sel: any = window.getSelection();\r\n\r\nexport const EditNote: React.FC<NewNoteProps> = ({ addNote, editNote, currNote }) => {\r\n    const [note, setNote] = useState<Note>({ title: '', text: '' })\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const formRef = useRef<any>();\r\n    const inputTitleRef = useRef<any>();\r\n    const inputTextRef = useRef<any>();\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', handleClick);\r\n        return (() => document.removeEventListener('mousedown', handleClick));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currNote) {\r\n            setNote(currNote);\r\n            inputTitleRef.current.innerText = currNote.title;\r\n            inputTextRef.current.innerText = currNote.text;\r\n            inputTextRef.current.focus();\r\n        }\r\n    }, [currNote])\r\n\r\n    const handleClick = (e: MouseEvent) => {\r\n        if (!formRef.current.contains(e.target)) handleSubmit();\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLDivElement>) => {\r\n        const name: string = e.target.dataset.name || '';\r\n        const value: string = e.target.innerText;\r\n        setNote(prev => ({ ...prev, [name]: value }));\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        let pNote: Note | undefined;\r\n\r\n        await setNote(prevState => {\r\n            pNote = { ...prevState };\r\n            return prevState;\r\n        });\r\n\r\n        setIsFocused(false);\r\n        if (pNote && !pNote.title && !pNote.text) return;\r\n        (pNote && pNote._id) ? editNote(pNote) : (pNote && addNote(pNote));\r\n        setNote({ title: '', text: '' });\r\n        inputTitleRef.current.innerText = '';\r\n        inputTextRef.current.innerText = '';\r\n    }\r\n\r\n    const handleKeyDown = (e: any): void => {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault();\r\n            inputTextRef.current.focus();\r\n        }\r\n    }\r\n\r\n    const setCaret = () => {\r\n        const lastLine = inputTextRef.current.childNodes?.length;\r\n        if (lastLine) {\r\n            const textLength = inputTextRef.current.childNodes[lastLine - 1].length;\r\n            range.setStart(inputTextRef.current.childNodes[lastLine - 1], textLength);\r\n            range.collapse(true);\r\n            sel.removeAllRanges();\r\n            sel.addRange(range);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-note-container flex column justify-center\"  >\r\n            <div className={`screen ${isFocused ? 'display' : ''}`} />\r\n            <form ref={formRef} className={`flex column ${isFocused ? 'focused' : ''}`} onFocus={() => setIsFocused(true)} onSubmit={(e) => e.preventDefault()}>\r\n                <div contentEditable ref={inputTitleRef} className={`title-input ${note.title ? '' : 'empty'} ${isFocused ? 'focused' : ''}`} data-name=\"title\" onInput={handleChange} onKeyDown={handleKeyDown} spellCheck=\"false\" /* hidden={!isFocused && !note.title && !note.text} */ />\r\n                <div contentEditable ref={inputTextRef} className={`text-input ${note.text ? '' : 'empty'}`} data-name=\"text\" onInput={handleChange} spellCheck=\"false\" onFocus={setCaret} />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Note } from '../interfaces/noteInterface';\r\n\r\nexport const NotePreview: React.FC<any> = observer(({ note, setNote, removeNote }: { note: Note, setNote: any, removeNote: any }) => {\r\n\r\n    return (\r\n        <div className=\"note\">\r\n            <h3 className=\"note-title\">{note.title}</h3>\r\n            <div className=\"note-text\">{note.text}</div>\r\n            <div className=\"manage-buttons\">\r\n                <button className=\"edit-button\" onClick={() => setNote(note._id)}>Edit</button>\r\n                <button className=\"delete-button\" onClick={() => removeNote(note._id || '')}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Note } from '../interfaces/noteInterface';\r\nimport { NotePreview } from './NotePreview';\r\n\r\n\r\nexport const NoteList: React.FC<any> = observer(({ notes, setNote, removeNote }: { notes: Note[], setNote: any, removeNote: any }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"note-list-container\">\r\n            <div className=\"note-list-wrapper\">\r\n                {notes.map((note: Note) => <NotePreview key={note._id} note={note} setNote={setNote} removeNote={removeNote} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import { Note } from '../interfaces/noteInterface';\r\nimport Axios from 'axios';\r\nconst axios = Axios.create({ withCredentials: true });\r\nconst baseUrl = (process.env.NODE_ENV !== 'development') ? '/api/note' : '//localhost:3030/api/note';\r\n\r\nexport const getNotes = (): Promise<Note[]> => axios.get(baseUrl).then(res => res.data);\r\n\r\nexport const getNote = (id: string): Promise<Note> => axios.get(`${baseUrl}/${id}`).then(res => res.data);\r\n\r\nexport const createNote = (note: Note): Promise<Note> => axios.post(baseUrl, note).then(res => res.data);\r\n\r\nexport const editNote = (note: Note): Promise<Note> => axios.put(`${baseUrl}/${note._id}`, note).then(res => res.data);\r\n\r\nexport const removeNote = (id: string): Promise<void> => axios.delete(`${baseUrl}/${id}`);","import { observable, action, makeObservable, when, autorun, computed, reaction } from 'mobx';\r\nimport { Note } from '../interfaces/noteInterface';\r\nimport { getNotes, getNote, createNote, editNote, removeNote } from '../services/noteService';\r\n\r\n\r\nexport class NoteStore {\r\n    @observable notes: Note[] = []\r\n    @observable currNote: Note | null = null\r\n\r\n    constructor() {\r\n        makeObservable(this);\r\n    }\r\n\r\n    @action\r\n    loadNotes = async () => {\r\n        const notes = await getNotes();\r\n        notes.reverse();\r\n        this.notes = notes;\r\n    }\r\n\r\n    @action\r\n    loadNote = async (id: string) => {\r\n        const note = await getNote(id);\r\n        this.currNote = note;\r\n    }\r\n\r\n    @action\r\n    addNote = async (note: Note) => {\r\n        const savedNote = await createNote(note);\r\n        this.notes.unshift(savedNote);\r\n    }\r\n\r\n    @action\r\n    editNote = async (note: Note) => {\r\n        const savedNote = await editNote(note);\r\n        const idx = this.notes.findIndex(n => n._id === note._id);\r\n        this.notes.splice(idx, 1, savedNote);\r\n    }\r\n\r\n    @action\r\n    removeNote = async (id: string) => {\r\n        await removeNote(id);\r\n        const idx = this.notes.findIndex(n => n._id === id);\r\n        this.notes.splice(idx, 1);\r\n    }\r\n\r\n    @computed\r\n    get noteLength() {\r\n        return this.notes.length;\r\n    }\r\n\r\n\r\n\r\n}","import React, { createContext, useContext } from 'react';\r\nimport { NoteStore } from './noteStore';\r\n\r\ntype RootStateContextValue = {\r\n    noteStore: NoteStore\r\n}\r\n\r\nconst RootStateContext = createContext<RootStateContextValue>({} as RootStateContextValue);\r\n\r\nconst noteStore = new NoteStore();\r\n\r\nexport const RootStateProvider: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {\r\n    return <RootStateContext.Provider value={{ noteStore }}>{children}</RootStateContext.Provider>\r\n}\r\n\r\n\r\nexport const useRootStore = () => useContext(RootStateContext)","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { EditNote } from '../cmps/EditNote';\r\nimport { NoteList } from '../cmps/NoteList';\r\nimport { useRootStore } from '../store/rootStateContext';\r\n\r\n\r\nexport const NoteApp: React.FC<any> = observer(() => {\r\n    const { noteStore } = useRootStore();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        noteStore.loadNotes();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"note-main-container flex column\">\r\n            <div className=\"header-wrapper flex\">\r\n                <div className=\"logo\" />\r\n                <EditNote addNote={noteStore.addNote} editNote={noteStore.editNote} currNote={noteStore.currNote} />\r\n            </div>\r\n            <NoteList notes={noteStore.notes} setNote={noteStore.loadNote} removeNote={noteStore.removeNote} />\r\n        </div>\r\n    )\r\n\r\n}\r\n)\r\n\r\n","import React from 'react';\nimport { NoteApp } from './pages/NoteApp';\n\nfunction App() {\n\n  return (\n    <div className=\"main-container\">\n      <NoteApp />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RootStateProvider } from './store/rootStateContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RootStateProvider>\n      <App />\n    </RootStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}